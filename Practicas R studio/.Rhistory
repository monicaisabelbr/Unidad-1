print("DataFrame original:")
print(head(data.vg))
cat("Filas originales:", nrow(data.vg), "\n\n")
# Método 1: na.omit() - Elimina filas con cualquier NA
df_sin_na <- na.omit(data.vg)
print("Con na.omit():")
print(head(df_sin_na))
cat("Filas después de na.omit():", nrow(df_sin_na), "\n\n")
# Método 2: complete.cases() - Más control
df_completo <- data.vg[complete.cases(data.vg), ]
print("Con complete.cases():")
print(head(df_completo))
cat("Filas después de complete.cases():", nrow(df_completo), "\n")
# DataFrame de ejemplo con missing values
print("DataFrame original:")
print(head(data.vg))
cat("Filas originales:", nrow(data.vg), "\n\n")
# Método 1: na.omit() - Elimina filas con cualquier NA
df_sin_na <- na.omit(data.vg)
print("Con na.omit():")
print(head(df_sin_na))
cat("Filas después de na.omit():", nrow(df_sin_na), "\n\n")
# Método 2: complete.cases() - Más control
df_completo <- data.vg[complete.cases(data.vg), ]
print("Con complete.cases():")
print(head(df_completo))
cat("Filas después de complete.cases():", nrow(df_completo), "\n")
# DataFrame de ejemplo con missing values
print("DataFrame original:")
print(head(data.vg))
cat("Filas originales:", nrow(data.vg), "\n\n")
# Método 2: complete.cases() - Más control
df_completo <- data.vg[complete.cases(data.vg), ]
print("Con complete.cases():")
print(head(df_completo))
cat("Filas después de complete.cases():", nrow(df_completo), "\n")
# DataFrame de ejemplo con missing values
print("DataFrame original:")
print(head(data.vg))
cat("Filas originales:", nrow(data.vg), "\n\n")
# Método 2: complete.cases() - Más control
df_completo <- data.vg[complete.cases(data.vg), ]
print("Con complete.cases():")
print(head(df_completo))
cat("Filas después de complete.cases():", nrow(df_completo), "\n")
dim(data.vg)
# DataFrame de ejemplo con missing values
print("DataFrame original:")
print(head(data.vg))
cat("Filas originales:", nrow(data.vg), "\n\n")
# Método 2: complete.cases() - Más control
df_completo <- data.vg[complete.cases(data.vg), ]
print("Con complete.cases():")
print(head(df_completo))
cat("Filas después de complete.cases():", nrow(df_completo), "\n")
dim(df_completo)
summary(df_completo$Global_Sales)
set.seed(123)
muestra <- sample_n(df_sin_na,300)
media_muestra_year <- mean(muestra$Year); media_muestra_year
sd_muestra_year <- sd(muestra$Year); sd_muestra_year
media_NA_sales <- mean(muestra$NA_Sales) ;media_NA_sales
sd_NA_sales <- sd(muestra$NA_Sales); sd_NA_sales
media_EU_sales <- mean(muestra$EU_Sales); media_EU_sales
sd_EU_sales <- sd(muestra$EU_Sales); sd_EU_sales
media_JP_sales <- mean(muestra$JP_Sales); media_JP_sales
sd_JP_sales <- sd(muestra$JP_Sales); sd_JP_sales
media_other_sales <- mean(muestra$Other_Sales); media_other_sales
sd_other_sales <- sd(muestra$Other_Sales); sd_other_sales
media_global_sales <- mean(muestra$Global_Sales) ; media_global_sales
sd_global_sales <- sd(muestra$Global_Sales); sd_global_sales
# DataFrame de ejemplo con missing values
print("DataFrame original:")
print(head(data.vg))
cat("Filas originales:", nrow(data.vg), "\n\n")
# Método 2: complete.cases() - Más control
df_sin_na <- data.vg[complete.cases(data.vg), ]
print("Con complete.cases():")
print(head(df_completo))
cat("Filas después de complete.cases():", nrow(df_completo), "\n")
dim(df_sin_na)
summary(df_sin_na$Global_Sales)
set.seed(123)
muestra <- sample_n(df_sin_na,300)
media_muestra_year <- mean(muestra$Year); media_muestra_year
sd_muestra_year <- sd(muestra$Year); sd_muestra_year
media_NA_sales <- mean(muestra$NA_Sales) ;media_NA_sales
sd_NA_sales <- sd(muestra$NA_Sales); sd_NA_sales
media_EU_sales <- mean(muestra$EU_Sales); media_EU_sales
sd_EU_sales <- sd(muestra$EU_Sales); sd_EU_sales
media_JP_sales <- mean(muestra$JP_Sales); media_JP_sales
sd_JP_sales <- sd(muestra$JP_Sales); sd_JP_sales
media_other_sales <- mean(muestra$Other_Sales); media_other_sales
sd_other_sales <- sd(muestra$Other_Sales); sd_other_sales
media_global_sales <- mean(muestra$Global_Sales) ; media_global_sales
sd_global_sales <- sd(muestra$Global_Sales); sd_global_sales
summary(df_sin_na$Global_Sales)
hist(df_sin_na$Global_Sales)
summary(df_sin_na$Global_Sales)
hist(df_sin_na$Global_Sales)
hist(filter(df_completo, Global Sales <5)$Global_Sales)
summary(df_sin_na$Global_Sales)
hist(df_sin_na$Global_Sales)
hist(filter(df_completo, Global_Sales < 5)$Global_Sales)
summary(df_sin_na$Global_Sales)
hist(df_sin_na$Global_Sales)
hist(filter(df_sin_na, Global_Sales < 5)$Global_Sales)
1:16327
1:5
sample(1:10,2,replace = TRUE)
sample(1:10,2,replace = TRUE)
sample(1:10,2,replace = TRUE)
sample(1:10,2,replace = TRUE)
sample(1:10,2,replace = TRUE)
sample(1:10,5,replace = TRUE)
set.seed(123)
sample(1:10,5,replace = TRUE)
set.seed(123)
sample(1:10,5,replace = TRUE)
set.seed(123)
sample(1:10,5,replace = TRUE)
set.seed(123)
sample(1:10,5,replace = TRUE)
set.seed(123)
sample(1:10,5,replace = TRUE)
set.seed(123)
df_sin_na[sample(1:10,5,replace = TRUE),]
set.seed(123)
df_sin_na[sample(1:6,5,replace = TRUE),]
set.seed(123)
indices_muestra <- sample(1:6,5, replace = TRUE)
df_sin_na[indices_muestra,]
set.seed(123)
indices_muestra <- sample(1:6,5, replace = TRUE); indices_muestra
df_sin_na[indices_muestra,]
set.seed(13)
indices_muestra <- sample(1:6,5, replace = TRUE);
df_sin_na[indices_muestra,]
indices_muestra <- sample(1:6,5, replace = TRUE);
df_sin_na[indices_muestra,]
set.seed(123)
indices_muestra <- sample(1:6,5, replace = TRUE);
df_sin_na[indices_muestra,]
set.seed(123)
indices_muestra <- sample(1:16327,300, replace = TRUE);
df_sin_na[indices_muestra,]
set.seed(123)
N <- dim(df_sin_na)[1]
indices_muestra <- sample(1:N,5, replace = TRUE);
df_sin_na[indices_muestra,]
set.seed(123)
N <- dim(df_sin_na)[1]
indices_muestra <- sample(1:N,5, replace = TRUE);
data.muestra <- df_sin_na[indices_muestra,]
#library(mrgsolve)
library(ggplot2)
library(dplyr)
data_path <- file.path("C:/Users/isabe/OneDrive - Universidad Privada del Valle/4TO SEMESTRE/ESTADÍSTICA IV/Unidad 1/Prácticas R studio/vgsales.csv")
data.vg.raw <- read.csv(data_path,
stringsAsFactors = F,na.strings = ".",header = T,sep=",")
summary(data.vg.raw)
data_path <- file.path("C:/Users/isabe/OneDrive - Universidad Privada del Valle/4TO SEMESTRE/ESTADISTICA IV/Unidad 1/Practicas R studio/vgsales.csv")
data.vg.raw <- read.csv(data_path,
stringsAsFactors = F,na.strings = ".",header = T,sep=",")
data_path <- file.path("C:/Users/isabe/OneDrive - Universidad Privada del Valle/4TO SEMESTRE/ESTADÍSTICA IV/Unidad 1/Prácticas R studio/vgsales.csv")
data.vg.raw <- read.csv(data_path,
stringsAsFactors = F,na.strings = ".",header = T,sep=",")
#library(mrgsolve)
library(ggplot2)
library(dplyr)
data_path <- file.path("C:/Users/isabe/OneDrive - Universidad Privada del Valle/4TO SEMESTRE/ESTADISTICA IV/Unidad 1/Practicas R studio/vgsales.csv")
data.vg.raw <- read.csv(data_path,
stringsAsFactors = F,na.strings = ".",header = T,sep=",")
head(data.vg.raw)
str(data.vg.raw)
summary(data.vg.raw)
data.vg <- data.vg.raw
data.vg$Platform <- factor(data.vg$Platform)
data.vg$Year <- as.numeric(data.vg$Year)
summary(data.vg)
str(data.vg.raw)
unique(data.vg.raw$Year)
head(filter(data.vg.raw, Year =="N/A"))
unique(data.vg$Platform)
filter(data.vg, Name =="FIFA 15")
hist(data.vg$NA_Sales )
# Contar NA por columna
na_por_columna <- colSums(is.na(data.vg))
print("NA por columna:")
print(na_por_columna)
# Porcentaje de NA por columna
porcentaje_na <- colMeans(is.na(data.vg)) * 100
print("Porcentaje de NA por columna:")
print(round(porcentaje_na, 2))
length(unique(data.vg$Publisher))
filter(data.vg, Publisher==" ")
# DataFrame de ejemplo con missing values
print("DataFrame original:")
print(head(data.vg))
cat("Filas originales:", nrow(data.vg), "\n\n")
# Método 2: complete.cases() - Más control
df_sin_na <- data.vg[complete.cases(data.vg), ]
print("Con complete.cases():")
print(head(df_completo))
cat("Filas después de complete.cases():", nrow(df_completo), "\n")
dim(df_sin_na)
summary(df_sin_na$Global_Sales)
hist(df_sin_na$Global_Sales)
hist(filter(df_sin_na, Global_Sales < 5)$Global_Sales)
set.seed(123)
N <- dim(df_sin_na)[1]
indices_muestra <- sample(1:N,200, replace = TRUE);
data.muestra <- df_sin_na[indices_muestra,]
summary(data.muestra)
#library(mrgsolve)
library(ggplot2)
library(dplyr)
data_path <- file.path("C:/Users/isabe/OneDrive - Universidad Privada del Valle/4TO SEMESTRE/ESTADISTICA IV/Unidad 1/Practicas R studio/vgsales.csv")
data.vg.raw <- read.csv(data_path,
stringsAsFactors = F,na.strings = ".",header = T,sep=",")
head(data.vg.raw)
str(data.vg.raw)
summary(data.vg.raw)
data.vg <- data.vg.raw
data.vg$Platform <- factor(data.vg$Platform)
data.vg$Year <- as.numeric(data.vg$Year)
summary(data.vg)
str(data.vg.raw)
unique(data.vg.raw$Year)
head(filter(data.vg.raw, Year =="N/A"))
unique(data.vg$Platform)
filter(data.vg, Name =="FIFA 15")
hist(data.vg$NA_Sales )
# Contar NA por columna
na_por_columna <- colSums(is.na(data.vg))
print("NA por columna:")
print(na_por_columna)
# Porcentaje de NA por columna
porcentaje_na <- colMeans(is.na(data.vg)) * 100
print("Porcentaje de NA por columna:")
print(round(porcentaje_na, 2))
length(unique(data.vg$Publisher))
filter(data.vg, Publisher==" ")
# DataFrame de ejemplo con missing values
print("DataFrame original:")
print(head(data.vg))
cat("Filas originales:", nrow(data.vg), "\n\n")
# Método 2: complete.cases() - Más control
df_sin_na <- data.vg[complete.cases(data.vg), ]
print("Con complete.cases():")
print(head(df_sin_na))
cat("Filas después de complete.cases():", nrow(df_sin_na), "\n")
dim(df_sin_na)
summary(df_sin_na$Global_Sales)
hist(df_sin_na$Global_Sales)
hist(filter(df_sin_na, Global_Sales < 5)$Global_Sales)
set.seed(123)
N <- dim(df_sin_na)[1]
indices_muestra <- sample(1:N,200, replace = TRUE);
data.muestra <- df_sin_na[indices_muestra,]
summary(data.muestra)
set.seed(123)
N <- dim(df_sin_na)[1]
indices_muestra <- sample(1:N,200, replace = TRUE);
data.muestra <- df_sin_na[indices_muestra,]
summary(data.muestra$Global_Sales)
set.seed(123)
muestra <- sample_n(df_sin_na,300)
media_muestra_year <- mean(muestra$Year); media_muestra_year
sd_muestra_year <- sd(muestra$Year); sd_muestra_year
media_NA_sales <- mean(muestra$NA_Sales) ;media_NA_sales
sd_NA_sales <- sd(muestra$NA_Sales); sd_NA_sales
media_EU_sales <- mean(muestra$EU_Sales); media_EU_sales
sd_EU_sales <- sd(muestra$EU_Sales); sd_EU_sales
media_JP_sales <- mean(muestra$JP_Sales); media_JP_sales
sd_JP_sales <- sd(muestra$JP_Sales); sd_JP_sales
media_other_sales <- mean(muestra$Other_Sales); media_other_sales
sd_other_sales <- sd(muestra$Other_Sales); sd_other_sales
media_global_sales <- mean(muestra$Global_Sales) ; media_global_sales
sd_global_sales <- sd(muestra$Global_Sales); sd_global_sales
df <- filter(data.vg,NA_Sales<2.5)
# Histograma agrupado por categoría
ggplot( df , aes(x = NA_Sales)) +
geom_histogram(position = "dodge", alpha = 0.7, bins = 20) +
labs(title = "Histograma Agrupado de Ventas por Ano",
x = "Ventas",
y = "Frecuencia") +
theme_minimal()
data.vg  <- data.vg[complete.cases(data.vg), ]
dim(data.vg)
summary(data.vg$Global_Sales)
dim(filter(data.vg, Global_Sales<2))
#library(mrgsolve)
library(ggplot2)
library(dplyr)
data_path <- file.path("C:/Users/isabe/OneDrive - Universidad Privada del Valle/4TO SEMESTRE/ESTADISTICA IV/Unidad 1/Practicas R studio/vgsales.csv")
data.vg.raw <- read.csv(data_path,
stringsAsFactors = F,na.strings = ".",header = T,sep=",")
head(data.vg.raw)
str(data.vg.raw)
summary(data.vg.raw)
data.vg <- data.vg.raw
data.vg$Platform <- factor(data.vg$Platform)
data.vg$Year <- as.numeric(data.vg$Year)
summary(data.vg)
str(data.vg.raw)
unique(data.vg.raw$Year)
head(filter(data.vg.raw, Year =="N/A"))
unique(data.vg$Platform)
filter(data.vg, Name =="FIFA 15")
hist(data.vg$NA_Sales )
# Contar NA por columna
na_por_columna <- colSums(is.na(data.vg))
print("NA por columna:")
print(na_por_columna)
# Porcentaje de NA por columna
porcentaje_na <- colMeans(is.na(data.vg)) * 100
print("Porcentaje de NA por columna:")
print(round(porcentaje_na, 2))
length(unique(data.vg$Publisher))
filter(data.vg, Publisher==" ")
# DataFrame de ejemplo con missing values
print("DataFrame original:")
print(head(data.vg))
cat("Filas originales:", nrow(data.vg), "\n\n")
# Método 2: complete.cases() - Más control
df_sin_na <- data.vg[complete.cases(data.vg), ]
print("Con complete.cases():")
print(head(df_sin_na))
cat("Filas después de complete.cases():", nrow(df_sin_na), "\n")
dim(df_sin_na)
summary(df_sin_na$Global_Sales)
hist(df_sin_na$Global_Sales)
hist(filter(df_sin_na, Global_Sales < 5)$Global_Sales)
set.seed(123)
N <- dim(df_sin_na)[1]
indices_muestra <- sample(1:N,200, replace = TRUE);
data.muestra <- df_sin_na[indices_muestra,]
summary(data.muestra$Global_Sales)
summary(data.vg$Global_Sales)
dim(filter(data.vg, Global_Sales<2))
dim(data.vg)
dim( filter(data.vg, Global_Sales<2) )[1]  /  dim(data.vg)[1]
data.vg.pobint <- filter(data.vg, Global_Sales<2)
summary(data.vg.pobint$Global_Sales)
set.seed(10)
N <- dim(data.vg.pobint)[1]
indices_muestra <- sample(1:N,200,replace = TRUE)
data.muestra<-data.vg.pobint[indices_muestra, ]
summary(data.muestra$Global_Sales)
df <- data.vg.pobint
# Histograma agrupado por categoría
ggplot(df , aes(x = Global_Sales) ) +
geom_histogram(alpha = 0.4, bins = 20) +
labs(title = "Histograma de Ventas Globales de la poblacion de interes",
x = "Ventas globales",
y = "Frecuencia") +
theme_minimal()
summary(df)
set.seed(123)
indices_muestra <- sample(1:5,2,replace = FALSE)
df[indices_muestra,]
# Calcula la tabla de frecuencias absolutas para la población de interés
freq_pobint <- table(data.vg.pobint$Global_Sales)
# Calcula la tabla de frecuencias relativas
freq_rel_pobint <- prop.table(freq_pobint)
# Convierte a un data frame para una mejor visualización (opcional)
df_freq_rel_pobint <- as.data.frame(freq_rel_pobint)
colnames(df_freq_rel_pobint) <- c("Ventas_Globales", "Frecuencia_Relativa")
# Muestra las primeras filas de las frecuencias relativas
head(df_freq_rel_pobint)
# Calcula la tabla de frecuencias absolutas para la población de interés
freq_pobint <- table(data.vg.pobint$Global_Sales)
# Calcula la tabla de frecuencias relativas
freq_rel_pobint <- prop.table(freq_pobint)
# Convierte a un data frame para una mejor visualización (opcional)
df_freq_rel_pobint <- as.data.frame(freq_rel_pobint)
colnames(df_freq_rel_pobint) <- c("Ventas_Globales", "Frecuencia_Relativa")
# Muestra las primeras filas de las frecuencias relativas
head(df_freq_rel_pobint)
# Calcula la tabla de frecuencias absolutas para la muestra
freq_muestra <- table(data.muestra$Global_Sales)
# Calcula la tabla de frecuencias relativas
freq_rel_muestra <- prop.table(freq_muestra)
# Convierte a un data frame para una mejor visualización (opcional)
df_freq_rel_muestra <- as.data.frame(freq_rel_muestra)
colnames(df_freq_rel_muestra) <- c("Ventas_Globales", "Frecuencia_Relativa")
# Muestra las primeras filas de las frecuencias relativas
head(df_freq_rel_muestra)
# Crear data frames con una columna que identifique el origen de los datos
df_pobint <- data.frame(Global_Sales = data.vg.pobint$Global_Sales, Origen = "Población de Interés")
df_muestra <- data.frame(Global_Sales = data.muestra$Global_Sales, Origen = "Muestra")
# Combinar ambos data frames en uno solo
df_combinado <- rbind(df_pobint, df_muestra)
# Crear el histograma combinado usando frecuencias relativas (densidad)
ggplot(df_combinado, aes(x = Global_Sales, fill = Origen)) +
geom_histogram(aes(y = ..density..), alpha = 0.6, position = "identity", bins = 20) +
labs(title = "Histograma Combinado de Ventas Globales",
x = "Ventas Globales",
y = "Densidad (Frecuencia Relativa)") +
scale_fill_manual(values = c("Población de Interés" = "skyblue", "Muestra" = "salmon")) +
theme_minimal()
library(ggplot2)
library(dplyr)
data <- read.csv("vgsales.csv")
data <- read.csv("vgsales.csv")
data <- read.csv("vgsales.csv")
summary(data)
data.pobint <- data %>%
filter(Global_Sales < 2 & Global_Sales > 0) %>%
mutate(Peso_NA = NA_Sales / Global_Sales)
summary(data.pobint$Peso_NA)
ggplot(data.pobint, aes(x = Peso_NA)) +
geom_histogram(aes(y = ..density..), fill = "navy", alpha = 0.7, bins = 30) +
geom_density(color = "red", size = 1) +
labs(title = "Distribución del Peso de Ventas de NA (Población de Interés)",
x = "Peso de NA (NA_Sales / Global_Sales)",
y = "Densidad") +
theme_light()
ggplot(data.pobint, aes(x = Peso_NA)) +
geom_histogram(aes(y = ..density..), fill = "navy", alpha = 0.7, bins = 30) +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribución del Peso de Ventas de NA (Población de Interés)",
x = "Peso de NA (NA_Sales / Global_Sales)",
y = "Densidad") +
theme_light()
ggplot(data.pobint, aes(x = Peso_NA)) +
geom_histogram(aes(y = ..density..), fill = "navy", alpha = 0.4, bins = 30) +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribución del Peso de Ventas de NA (Población de Interés)",
x = "Peso de NA (NA_Sales / Global_Sales)",
y = "Densidad") +
theme_light()
data.pobint <- data.vg[data.vg$Global_Sales < 2 & data.vg$Global_Sales > 0, ]
data.pobint <- data.vg[data$Global_Sales < 2 & data$Global_Sales > 0, ]
data.pobint <- data[data$Global_Sales < 2 & data$Global_Sales > 0, ]
summary(data.pobint$Peso_NA)
data.pobint <- data[data$Global_Sales < 2 & data$Global_Sales > 0, ]
data.pobint$Peso_NA <- data.pobint$NA_Sales / data.pobint$Global_Sales
summary(data.pobint$Peso_NA)
ggplot(data.pobint, aes(x = Peso_NA)) +
geom_histogram(aes(y = ..density..), fill = "navy", alpha = 0.4, bins = 30) +
geom_density(color = "red", linewidth = 1) +
labs(title = "Distribución del Peso de Ventas de NA (Población de Interés)",
x = "Peso de NA (NA_Sales / Global_Sales)",
y = "Densidad") +
theme_light()
View(data.pobint)
View(data.pobint)
data.pobint <- data[data$Global_Sales < 2 & data$Global_Sales > 0, ]
data.pobint$Peso_NA <- data.pobint$NA_Sales / data.pobint$Global_Sales
summary(data.pobint$Peso_NA)
str(data.pobint)
set.seed(123)
muestra_1 <- sample_n(data.pobint,500)
set.seed(123)
muestra_1 <- sample_n(data.pobint,500)
set.seed(42)
muestra_2 <- sample_n(data.pobint, 500)
# Estadísticas básicas de la Muestra 1
cat("--- Estadísticas de la Muestra 1 ---\n")
summary(muestra_1$Peso_NA)
# Estadísticas básicas de la Muestra 2
cat("\n--- Estadísticas de la Muestra 2 ---\n")
summary(muestra_2$Peso_NA)
data_combinada <- bind_rows(
list(Poblacion = data.pobint, Muestra_1 = muestra_1, Muestra_2 = muestra_2),
.id = "Origen")
data_combinada <- bind_rows(
list(Poblacion = data.pobint, Muestra_1 = muestra_1, Muestra_2 = muestra_2),
.id = "Origen")
# Grafico de comparacion
ggplot(data_combinada, aes(x = Peso_NA, fill = Origen, color = Origen)) +
geom_density(alpha = 0.4) +
scale_fill_manual(values = c("Poblacion" = "gray", "Muestra_1" = "skyblue", "Muestra_2" = "salmon")) +
scale_color_manual(values = c("Poblacion" = "black", "Muestra_1" = "blue", "Muestra_2" = "red")) +
labs(title = "Comparación de Distribuciones: Población vs. Muestras",
subtitle = "El peso de las ventas de NA sigue un patrón similar en las muestras y la población",
x = "Peso de NA (NA_Sales / Global_Sales)",
y = "Densidad") +
theme_minimal()
data_combinada <- bind_rows(
list(Poblacion = data.pobint, Muestra_1 = muestra_1, Muestra_2 = muestra_2),
.id = "Origen")
# Grafico de comparacion
ggplot(data_combinada, aes(x = Peso_NA, fill = Origen, color = Origen)) +
geom_density(alpha = 0.4) +
scale_fill_manual(values = c("Poblacion" = "gray", "Muestra_1" = "skyblue", "Muestra_2" = "salmon")) +
scale_color_manual(values = c("Poblacion" = "black", "Muestra_1" = "blue", "Muestra_2" = "red")) +
labs(title = "Comparación de Distribuciones: Población vs. Muestras",
x = "Peso de NA (NA_Sales / Global_Sales)",
y = "Densidad") +
theme_minimal()
data_combinada <- bind_rows(
list(Poblacion = data.pobint, Muestra_1 = muestra_1, Muestra_2 = muestra_2),
.id = "Origen")
# Grafico de comparacion
ggplot(data_combinada, aes(x = Peso_NA, fill = Origen, color = Origen)) +
geom_density(alpha = 0.4) +
scale_fill_manual(values = c("Poblacion" = "gray", "Muestra_1" = "skyblue", "Muestra_2" = "salmon")) +
scale_color_manual(values = c("Poblacion" = "black", "Muestra_1" = "blue", "Muestra_2" = "red")) +
labs(title = "Comparación de Distribuciones: Población vs. Muestras",
x = "Peso de NA",
y = "Densidad") +
theme_minimal()
data.pobint <- data[data$Global_Sales < 2 & data$Global_Sales > 0, ]
data.pobint$Peso_NA <- data.pobint$NA_Sales / data.pobint$Global_Sales
summary(data.pobint$Peso_NA)
str(data.pobint)
data.pobint <- data[data$Global_Sales < 2 & data$Global_Sales > 0, ]
data.pobint$Peso_NA <- data.pobint$NA_Sales / data.pobint$Global_Sales
summary(data.pobint$Peso_NA)
